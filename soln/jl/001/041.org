#+TITLE: Project Euler solutions (#41-50)
#+AUTHOR: Steven Kuntz
#+EMAIL: stevenjkuntz@gmail.com
#+OPTIONS: num:nil toc:1
#+PROPERTY: header-args:ipython :session *python*
#+PROPERTY: header-args :results output :exports both

Initialize Python session with imports.

#+begin_src ipython :results none
from collections import OrderedDict
from itertools import permutations
import numpy as np
from math import ceil, log10
import timeit
#+end_src

* 41 Pandigital prime
** Q:

We shall say that an n-digit number is pandigital if it makes use of all the
digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is
also prime.

What is the largest n-digit pandigital prime that exists?

** A:

My first instinct was to claim \(n=9\) if we want the largest of the pandigital
primes. However, if we compute the sum of the digits for the 9-digit pandigital
number, we can show it will always be divisible by three, meaning it cannot be
nine. The same is true for \(n=8\).

\[ 1+2+\dots+9 = T_9 = 9(9+1)/2 = 45 \]

\[ 1+2+\dots+8 = T_8 = 8(8+1)/2 = 36 \]

That leaves us with \(n=7\), and lets us put an upper bound on our search.

\[ 1+2+\dots+7 = T_7 = 7(7+1)/2 = 28 \]

\[ N \leq 7654321 \]

#+begin_src ipython
from euler import esieve, is_pandigital

def pandigital_prime(n):
    """Find the largest pandigital prime less than ``n``."""
    primes = esieve(n)
    for p in primes[::-1]:
        if is_pandigital(p,set(range(1,ceil(log10(p))+1))):
            return p

assert pandigital_prime(2144)==2143
#+end_src

#+RESULTS:

The algorithm shares the run time complexity of the Sieve of Eratosthenes.

#+begin_src ipython
print(pandigital_prime(7654322))
%timeit pandigital_prime(7654322)
#+end_src

#+RESULTS:
: 7652413
: 350 ms ± 1.97 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

* 42 Coded triangle numbers
** Q:

The nth term of the sequence of triangle numbers is given by,
\(t_n = \frac{n(n+1)}{2}\); so the first ten triangle numbers are:

\[1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots \]

By converting each letter in a word to a number corresponding to its
alphabetical position and adding these values we form a word value. For example,
the word value for SKY is \(19 + 11 + 25 = 55 = t_{10}\). If the word value is a
triangle number then we shall call the word a triangle word.

Using words.txt (right click and 'Save Link/Target As...'), a 16K text file
containing nearly two-thousand common English words, how many are triangle
words?

** A:

This is easy since we've already coded everything necessary to make triangle
numbers, read the file, and compute scores. I chose to make a set of the first
100 triangle numbers. The 100th will be \(T_{100}=100(101)/2=5050\) which would
correspond to no less than 195 Zs in a row.

#+begin_src ipython
from euler import triangular, read_words, alphabetical_value

tri_set = {triangular(i) for i in range(100)}
print(len([t for t in alphabetical_value(read_words("042.txt")) if (t in tri_set)]))

%timeit tri_set = {triangular(i) for i in range(100)}; len([t for t in alphabetical_value(read_words("042.txt")) if (t in tri_set)])
#+end_src

#+RESULTS:
: 162
: 2.74 ms ± 70 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

* 43 Sub-string divisibility
** Q:

The number, 1406357289, is a 0 to 9 pandigital number because it is made up of
each of the digits 0 to 9 in some order, but it also has a rather interesting
sub-string divisibility property.

Let \(d_1\) be the 1st digit, \(d_2\) be the 2nd digit, and so on. In this way,
we note the following:

- \(d_2d_3d_4=406\) is divisible by 2
- \(d_3d_4d_5=063\) is divisible by 3
- \(d_4d_5d_6=635\) is divisible by 5
- \(d_5d_6d_7=357\) is divisible by 7
- \(d_6d_7d_8=572\) is divisible by 11
- \(d_7d_8d_9=728\) is divisible by 13
- \(d_8d_9d_{10}=289\) is divisible by 17

Find the sum of all 0 to 9 pandigital numbers with this property.

** A:

Starting off, let \(N=d_1d_2\ldots d_{10}\) where \(\forall i\neq j,\,
d_i\neq d_j,\, d_i,d_j\in\{0,1,\ldots,9\}\). Additionally, it follows the properties listed in the problem statement.

I can solve this by hand so I'm going to. There isn't really a need to code it.
I'll run through the statements and narrow down the possibilities as I go.

\begin{eqnarray*}
2|d_2d_3d_4 & \rightarrow & d_4\in\{0,2,4,6,8\} \\
3|d_3d_4d_5 & \rightarrow & 3|(d_3+d_4+d_5) \\
5|d_4d_5d_6 & \rightarrow & d_6\in\{0,5\} \\
\end{eqnarray*}

I can't imply anything about 7 besides exactly what values \(d_5,d_7\) can take.
Moving to 11, there are two possibilities for the first digit, and I just
enumerate all the values \(d_7d_8\) can take. Since \(d_6=0\) always yields a
contradiction, I know \(d_6=5\), and \(d_7,d_8\neq5\).

\begin{eqnarray*}
11|0d_7d_8 & \rightarrow & d_7=d_8,\,\text{contradiction}\, \Rightarrow d_6=5 \\
11|5d_7d_8 & \rightarrow & d_7d_8\in\{06,17,28,39,61,72,83,94\} \\
\end{eqnarray*}

Moving on to thirteen, I just need to find the smallest \(d_9\) for each
\(d_7d_8\) that makes \(13|d_7d_8d_9\) true. While finding it, I'll suspend the
requirement that \(d_9\) is a unique digit, just to better illustrate where that
is impossible.

\begin{eqnarray*}
13|06d_9 & \rightarrow & d_9=5=d_6,\,\text{contradiction}\, \Rightarrow d_7d_8\neq06 \\
13|17d_9 & \rightarrow & d_9=12,\,\text{contradiction}\, \Rightarrow d_7d_8\neq17 \\
13|28d_9 & \rightarrow & d_9=6 \\
13|39d_9 & \rightarrow & d_9=0 \\
13|61d_9 & \rightarrow & d_9=1=d_8,\,\text{contradiction}\, \Rightarrow d_7d_8\neq61 \\
13|72d_9 & \rightarrow & d_9=8 \\
13|83d_9 & \rightarrow & d_9=2 \\
13|94d_9 & \rightarrow & d_9=9=d_7,\,\text{contradiction}\, \Rightarrow d_7d_8\neq94 \\
         & \Rightarrow & d_6d_7d_8d_9\in\{5286,5390,5728,5832\}
\end{eqnarray*}

Repeating what we did for 13 with 17,

\begin{eqnarray*}
17|86d_{10} & \rightarrow & d_{10}=7 \\
17|90d_{10} & \rightarrow & d_{10}=1 \\
17|28d_{10} & \rightarrow & d_{10}=9 \\
17|32d_{10} & \rightarrow & d_{10}=3=d_8,\,\text{contradiction}\, \Rightarrow d_8d_9\neq32  \\
            & \Rightarrow & d_6d_7d_8d_9d_{10}\in\{52867,53901,57289\}
\end{eqnarray*}

Going back to 7, now armed with the knowledge that \(d_6d_7\in\{52,53,57\}\).

\begin{eqnarray*}
7|d_552 & \rightarrow & d_5\in\{2,9\};\, d_5=2=d_7,\,\text{contradiction}\, \rightarrow d_5=9 \\
7|d_553 & \rightarrow & d_5=5=d_6,\,\text{contradiction}\, \rightarrow d_6d_7\neq53 \\
7|d_557 & \rightarrow & d_5=3 \\
        & \Rightarrow & d_5d_6d_7d_8d_9d_{10}\in\{952867,357289\}
\end{eqnarray*}

In both possibilities I have to use \(2,5,7,8,9\) within \(d_5\ldots d_{10}\).
Going back to 2, this means

\[ 2|d_2d_3d_4 \land d_4\not\in\{2,5,7,8,9\} \rightarrow d_4\in\{0,4,6\} \]

Going to 3, knowing that \(d_4\in\{0,4,6\}\), \(d_5\in\{3,9\}\), and 
\(d_3\not\in\{2,5,7,8,9\}\) (or \(d_3\in\{0,1,3,4,6\}\)).

\begin{eqnarray*}
3|d_303 & \rightarrow & d_3\in\{0,3,6\};\, d_3=0=d_4, d_3=3=d_5,\,\text{are contradictions}\, \rightarrow d_3=6 \\
3|d_309 & \rightarrow & d_3\in\{0,3,6\};\, d_3=0=d_4, d_3=6=d_9,\,\text{are contradictions}\, \rightarrow d_3=3 \\
3|d_34d_5 & \rightarrow & d_3\in\{\},\,\text{contradiction}\, \Rightarrow d_4\neq4 \\
3|d_363 & \rightarrow & d_3\in\{0,3,6\};\, d_3=3=d_5, d_3=6=d_5,\,\text{are contradictions}\, \rightarrow d_3=0 \\
3|d_369 & \rightarrow & d_4=6=d_9,\,\text{contradiction}\, \rightarrow d_4d_5\neq69 \\
        & \Rightarrow & d_3d_4d_5d_6d_7d_8d_9d_{10}\in\{30952867,60357289,06357289\}
\end{eqnarray*}

Now the only digits left are \(1,4\).

\[ N \in \{1430952867,1460357289,1406357289,4130952867,4160357289,4106357289\} \]

#+begin_src ipython
print(sum([1430952867,1460357289,1406357289,4130952867,4160357289,4106357289]))
#+end_src

#+RESULTS:
: 16695334890

* 44 Pentagon numbers
** Q:

Pentagonal numbers are generated by the formula, \(P_n=n(3n-1)/2\). The first
ten pentagonal numbers are:

\[ 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots \]

It can be seen that \(P_4+P_7=22+70=92=P_8\). However, their difference,
\(70-22=48\), is not pentagonal.

Find the pair of pentagonal numbers, \(P_j\) and \(P_k\), for which their sum
and difference are pentagonal and \(D=|P_k-P_j|\) is minimised; what is the
value of \(D\)?

** A:

Here's a wrapper for the pentagonal numbers.

#+begin_src ipython
def pentagonal(n):
    """Find the ``n``th pentagonal number.

    ``P_n = n(3n+1)/2``
    """
    return n*(3*n-1)//2

assert pentagonal(1) == 1
assert pentagonal(2) == 5
assert pentagonal(10) == 145
#+end_src

#+RESULTS:

Let \(a>b>c>d\). We want these numbers to obey the following equations, and we
want to minimize \(D=P_d\).

\begin{eqnarray*}
S = P_a = P_b + P_c \\
D = P_d = P_b - P_c \\
\end{eqnarray*}

The difference of these equations gives

\[ P_d & = & P_a - 2P_c \]

And reordering the sum equation gives

\[ P_b & = & P_a - P_c \]

So we can iterate through \(P_a,P_c\), caching \(P_a\) as we go in an ordered
set. This ensures we can check for every \(P_b,P_c,P_d\) that arises. I'm not
sure why the first hit is the right answer, but it works. Fuck it.

#+begin_src ipython
def pe044():
    """Find the pair of pentagonal numbers where their sum and difference are
    also pentagonal and the difference is minimized. Returns the difference.
    """
    p_set = OrderedDict()
    a = 1
    while True:
        p_a = pentagonal(a)
        p_set.update({p_a:None})
        for p_c in p_set:
            if (p_a - p_c in p_set) and (p_a - 2*p_c in p_set):
                return p_a - 2*p_c
        a += 1

print(pe044())
#+end_src

#+RESULTS:
: 5482660

* 45 Triangular, pentagonal, and hexagonal
** Q:

Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle	 	\(T_n=n(n+1)/2\) \(1, 3, 6, 10, 15, \dots \)
Pentagonal	\(P_n=n(3n-1)/2\)	\(1, 5, 12, 22, 35, \dots \)
Hexagonal	 	\(H_n=n(2n-1)\) \(1, 6, 15, 28, 45, \dots \)
It can be verified that \(T_{285} = P_{165} = H_{143} = 40755\).

Find the next triangle number that is also pentagonal and hexagonal.

** A:

Here's a wrapper for the hexagonal numbers.

#+begin_src ipython
def hexagonal(n):
    """Find the ``n``th hexagonal number.

    ``H_n = n(2n-1)``
    """
    return n*(2*n-1)

assert hexagonal(1) == 1
assert hexagonal(2) == 6
assert hexagonal(3) == 15
#+end_src

#+RESULTS:

\[ T_a=P_b=H_c \,,\, a>b>c \]

Now I just build two sets as I iterate.

#+begin_src ipython
p_set = set()
h_set = set()
a = 1
while True:
    t_a = triangular(a)
    if (a > 285) and (t_a in p_set) and (t_a in h_set):
        break
    p_set.add(pentagonal(a))
    h_set.add(hexagonal(a))
    a += 1
print(t_a)
#+end_src

#+RESULTS:
: 1533776805

* 46 Goldbach's other conjecture
** Q:

It was proposed by Christian Goldbach that every odd composite number can be
written as the sum of a prime and twice a square.

\begin{eqnarray*}
9 = 7 + 2\times1^2 \\
15 = 7 + 2\times2^2 \\
21 = 3 + 2\times3^2 \\
25 = 7 + 2\times3^2 \\
27 = 19 + 2\times2^2 \\
33 = 31 + 2\times1^2
\end{eqnarray*}

It turns out that the conjecture was false.

What is the smallest odd composite that cannot be written as the sum of a prime
and twice a square?

** A:

For every odd composite \(n\) we need a prime \(p\) such that \(n=p+2i^2\).
I can enforce bounds \(2 < p < n\) since \(i=0\) implies that \(n\) is prime,
and \(p=2\) implies \(n\) is even. I rewrite the conjecture as
\(\frac{n-p}{2}=i^2\) because it is easier to check. With this knowledge, the
algorithm is as simple as checking every odd for being prime, caching the hits,
and if it is not finding some \(p\) in the cache such that \(\frac{n-p}{2}\) is
a perfect square for the misses. If there is not a prime in the cache, return
\(n\).

#+begin_src ipython
from euler import is_prime

def anti_goldbach():
    """Find the first odd composite ``n`` such that there is no prime ``p`` such
    that ``n = p + 2*i^2`` where ``i`` is a positive integer."""
    primes = set()
    n = 3
    while True:
        if is_prime(n):
            primes.add(n)
        else:
            first = True
            for p in primes:
                isquared = (n-p)//2
                if int(isquared**0.5)**2 == isquared:
                    first = False
                    break
            if first:
                return n
        n += 2

print(anti_goldbach())
%timeit anti_goldbach()
#+end_src

#+RESULTS:
: 5777
: 51 ms ± 267 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

* 47 Distinct primes factors
** Q:

The first two consecutive numbers to have two distinct prime factors are:

14 = 2 × 7. 
15 = 3 × 5

The first three consecutive numbers to have three distinct prime factors are:

644 = 2² × 7 × 23. 
645 = 3 × 5 × 43. 
646 = 2 × 17 × 19.

Find the first four consecutive integers to have four distinct prime factors
each. What is the first of these numbers?

** A:

Another =while True= loop.

#+begin_src ipython
from euler import prime_factors

n_pfact = []
n = 2
while True:
    n_pfact += [len(prime_factors(n))]
    if all([n==4 for n in n_pfact[-4:]]):
        break
    n += 1
print(n)
#+end_src

#+RESULTS:
: 134046

* 48 Self powers
** Q:

The series, \(1^1 + 2^2 + 3^3 + ... + 10^{10} = 10405071317\).

Find the last ten digits of the series, \(1^1 + 2^2 + 3^3 + ... + 1000^{1000}\).

** A:

Another of many large number problems made irrelevant by ipython's support for
large integers.

#+begin_src ipython
def sum_self_pow(n):
    return sum([i**i for i in range(1,n+1)])

assert sum_self_pow(10) == 10405071317
print(str(sum_self_pow(1000))[-10:])

%timeit sum_self_pow(1000)
#+end_src

#+RESULTS:
: 9110846700
: 7.1 ms ± 58.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

* 49 Prime permutations
** Q:

The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases
by 3330, is unusual in two ways: (i) each of the three terms are prime, and,
(ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes,
exhibiting this property, but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the three terms in this
sequence?

** A:

We want three primes \(1000 \leq p_1 < p_2 < p_3 < 10000\) such that
\(p_3-p_2=p_2-p_1=k\). I'm going to assume I use the same \(k\).

#+begin_src ipython
from euler import esieve
primes = esieve(10000)
primes = primes[primes>=1000]
primeset = set(primes)
hits = []
for p1 in primes[primes<3340]:
    p2 = p1 + 3330
    p3 = p2 + 3330
    if p2 in primeset and p3 in primeset:
        pperm = {int("".join(perm)) for perm in permutations(str(p1))}
        if p2 in pperm and p3 in pperm:
            hits += [(p1,p2,2*p2-p1)]
            
print(hits)
#+end_src

#+RESULTS:
: [(1487, 4817, 8147), (2969, 6299, 9629)]

* 50 Consecutive prime sum
** Q:

The prime 41, can be written as the sum of six consecutive primes:

41 = 2 + 3 + 5 + 7 + 11 + 13

This is the longest sum of consecutive primes that adds to a prime below
one-hundred.

The longest sum of consecutive primes below one-thousand that adds to a prime,
contains 21 terms, and is equal to 953.

Which prime, below one-million, can be written as the sum of the most
consecutive primes?

** A:

Easy with Sieve of Eratosthenes. Let \(S(n)=p_1+p_2+\ldots+p_n\) be the sum of
the first \(n\) primes. We want to maximize \(L=n-m\) such that \(S(n)-S(m)<N\)
is prime.

#+begin_src ipython
from euler import esieve

def pe050(n):
    primes = esieve(n)
    ps = set(primes)
    psums = [0]
    for p in primes:
        if psums[-1]>n:
            break
        psums += [psums[-1]+p]
    for L in range(len(psums),0,-1):
        for i in range(len(psums)-L,-1,-1):
            if psums[L+i-1]-psums[i] in ps:
                return psums[L+i-1]-psums[i]
            
assert pe050(100) == 41
assert pe050(1000) == 953
#+end_src

#+RESULTS:

Quick.

#+begin_src ipython
print(pe050(1000000))
%timeit pe050(1000000)
#+end_src

#+RESULTS:
: 997651
: 55.2 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
